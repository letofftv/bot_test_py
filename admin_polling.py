import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, ADMIN_ID
from database import Database

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = Database()

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
        return
    
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/pending - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
        "/approve <map_id> - –û–¥–æ–±—Ä–∏—Ç—å –∫–∞—Ä—Ç—É\n"
        "/reject <map_id> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"
    )

async def show_pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
        return
    
    pending_maps = db.get_pending_maps()
    
    if not pending_maps:
        await update.message.reply_text("–ù–µ—Ç –∫–∞—Ä—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    
    for map_id, map_data in pending_maps.items():
        user_id = map_data['user_id']
        map_type = map_data['data']['type']
        map_text = map_data['data']['map_text'][:500] + "..." if len(map_data['data']['map_text']) > 500 else map_data['data']['map_text']
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{map_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{map_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"üìã –ö–∞—Ä—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        message_text += f"ID: {map_id}\n"
        message_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        message_text += f"–¢–∏–ø: {map_type}\n\n"
        message_text += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{map_text}"
        
        await update.message.reply_text(message_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
        return
    
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("approve_"):
        map_id = data.split("_")[1]
        await approve_map(map_id, context)
        await query.edit_message_text(f"‚úÖ –ö–∞—Ä—Ç–∞ {map_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")
    elif data.startswith("reject_"):
        map_id = data.split("_")[1]
        await reject_map(map_id, context)
        await query.edit_message_text(f"‚ùå –ö–∞—Ä—Ç–∞ {map_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

async def approve_map(map_id: str, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä–∏—Ç—å –∫–∞—Ä—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    map_data = db.data.get("psychological_maps", {}).get(map_id)
    if not map_data:
        return
    
    db.approve_map(map_id)
    user_id = map_data['user_id']
    map_text = map_data['data']['map_text']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n{map_text}"
        )
    except Exception as e:
        logging.error(f"Error sending approved map to user {user_id}: {e}")

async def reject_map(map_id: str, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    map_data = db.data.get("psychological_maps", {}).get(map_id)
    if not map_data:
        return
    
    db.reject_map(map_id)
    user_id = map_data['user_id']
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É."
        )
    except Exception as e:
        logging.error(f"Error sending rejection to user {user_id}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logging.error("BOT_TOKEN environment variable is not set")
        return
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("admin", admin_start))
    app.add_handler(CommandHandler("pending", show_pending))
    app.add_handler(CallbackQueryHandler(handle_callback))
    
    logging.info("Starting admin bot with polling...")
    app.run_polling(
        poll_interval=1.0,
        timeout=30,
        bootstrap_retries=5,
        read_timeout=30,
        write_timeout=30
    )

if __name__ == "__main__":
    main() 
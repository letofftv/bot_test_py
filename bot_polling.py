import logging
import time
from collections import defaultdict
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_TOKEN, ADMIN_IDS
from database import Database
from local_responses import LocalResponseSystem
from psychological_maps import PSYCHOLOGICAL_MAPS

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, CONSULT, MAP_SELECT, MAP_TYPE, MAP_QUESTIONS, WAITING_MODERATION = range(6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup([
    ["1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"],
    ["2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É"]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
navigation_keyboard = ReplyKeyboardMarkup([
    ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
], resize_keyboard=True)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
map_names = [[f"{i+1}. {m['name']}"] for i, m in enumerate(PSYCHOLOGICAL_MAPS)]
map_select_keyboard = ReplyKeyboardMarkup(map_names + [["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

map_type_keyboard = ReplyKeyboardMarkup([
    ["–ë–∞–∑–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ (4 –≤–æ–ø—Ä–æ—Å–∞)"],
    ["–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ (10 –≤–æ–ø—Ä–æ—Å–æ–≤)"],
    ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
], resize_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
MAP_RULES_TEXT = (
    "üß≠ –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å: 3 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞\n"
    "–≠—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–∑–∏—Ç —Ç–µ–±—è. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –∏—Å–∫–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ —Ç–æ–≥–¥–∞ —Ç—ã —É–≤–∏–¥–∏—à—å –Ω–µ —Å–µ–±—è ‚Äî –∞ —Å–≤–æ—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –º–∞—Å–∫—É.\n"
    "1. –ü–∏—à–∏, –∫–∞–∫ –¥–ª—è —Å–µ–±—è ‚Äî –Ω–µ –∫–∞–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö.\n"
    "–≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —á–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Å–æ–±–æ–π. –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ ¬´–∫–∞–∑–∞—Ç—å—Å—è –ª—É—á—à–µ¬ª, ¬´—É–º–Ω–µ–µ¬ª –∏–ª–∏ ¬´–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–µ–µ¬ª. –ù–∏–∫–∞–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫, –Ω–∏–∫–∞–∫–æ–π –∫—Ä–∏—Ç–∏–∫–∏. –ö–∞—Ä—Ç–∞ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∏ —á–µ–º –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Ç—ã –±—É–¥–µ—à—å, —Ç–µ–º –≥–ª—É–±–∂–µ –∏ —Ç–æ—á–Ω–µ–µ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç.\n"
    "2. –û—Ç–≤–µ—á–∞–π –Ω–µ –∫–∞–∫ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω–æ¬ª, –∞ –∫–∞–∫ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.\n"
    "–ó–∞–±—É–¥—å –Ω–∞ –≤—Ä–µ–º—è, –∫–∞–∫ \"–ø—Ä–∏–Ω—è—Ç–æ\", \"–Ω–∞–¥–æ\", \"–æ–∂–∏–¥–∞–µ—Ç—Å—è\". –°–º–æ—Ç—Ä–∏ –≤ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç: —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —Ä–µ–∑–æ–Ω–∞–Ω—Å –∏–ª–∏ –æ—Ç—Ç–æ—Ä–∂–µ–Ω–∏–µ. –î–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç ¬´–Ω–µ—É–¥–æ–±–Ω—ã–π¬ª ‚Äî –æ–Ω, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π. –ü–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ç–µ–ª–µ—Å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –æ—Ç–≤–µ—Ç ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ.\n"
    "3. –î–∞–π —Å–µ–±–µ –≤—Ä–µ–º—è ‚Äî –∏ –ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.\n"
    "–û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –õ—É—á—à–µ ‚Äî –±–æ–ª—å—à–µ. –°—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã, —ç–º–æ—Ü–∏–∏, –æ–±—Ä–∞–∑—ã. –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–∞—É–∑—É ‚Äî –¥—ã—à–∏, —Å–º–æ—Ç—Ä–∏ –≤–Ω—É—Ç—Ä—å, –≤—Å–ø–æ–º–∏–Ω–∞–π. –ò–Ω–æ–≥–¥–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø—Ä–∏—à–µ–¥—à–µ–µ –∏–∑ –≥–ª—É–±–∏–Ω—ã, –≤–∞–∂–Ω–µ–µ –¥–µ—Å—è—Ç–∫–∞ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫."
)

CONSULT_WELCOME_TEXT = (
    "–ù–µ –ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã –¥—É–º–∞—Ç—å –∏–ª–∏ –∫–∞–∫ —Ç–µ–±—è —É—á–∏–ª–∏. –ü–∏—à–∏, –∫–∞–∫ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∞–µ—à—å –∏ —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ. –≠—Ç–æ –Ω–µ —Ç–µ—Å—Ç –Ω–∞ –º–æ—Ä–∞–ª—å ‚Äî —ç—Ç–æ –∑–µ—Ä–∫–∞–ª–æ, –∏ —á–µ–º –æ–Ω–æ —è—Å–Ω–µ–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç."
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

db = Database()
ai = LocalResponseSystem()
user_last_request = defaultdict(float)
MIN_REQUEST_INTERVAL = 10

def check_user_rate_limit(user_id: int) -> bool:
    now = time.time()
    last_request = user_last_request.get(user_id, 0)
    if now - last_request < MIN_REQUEST_INTERVAL:
        return False
    user_last_request[user_id] = now
    return True

def save_navigation_state(context: ContextTypes.DEFAULT_TYPE, current_state: int, previous_state: int = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    if context.user_data is None:
        context.user_data = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–µ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if 'navigation_stack' not in context.user_data:
        context.user_data['navigation_stack'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ç–µ–∫
    if previous_state is not None:
        context.user_data['navigation_stack'].append(previous_state)
    
    context.user_data['current_state'] = current_state

def get_previous_state(context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞"""
    if context.user_data is None or 'navigation_stack' not in context.user_data:
        return MENU
    
    navigation_stack = context.user_data.get('navigation_stack', [])
    if navigation_stack:
        return navigation_stack.pop()
    return MENU

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not update.message or not update.effective_user:
        return MENU
    
    user_id = update.effective_user.id
    
    if text == "üîô –ù–∞–∑–∞–¥":
        previous_state = get_previous_state(context)
        if previous_state == MENU:
            # –ï—Å–ª–∏ –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è —Ç–∞–º
            await update.message.reply_text(
                "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
            return MENU
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            return await navigate_to_state(update, context, previous_state)
    
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if context.user_data:
            context.user_data['navigation_stack'] = []
            context.user_data['current_state'] = MENU
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
        return MENU
    
    return None  # –ù–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

async def navigate_to_state(update: Update, context: ContextTypes.DEFAULT_TYPE, target_state: int) -> int:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
    if not update.message or not update.effective_user:
        return MENU
    
    user_id = update.effective_user.id
    
    if target_state == MENU:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
        return MENU
    
    elif target_state == MAP_SELECT:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ 15 –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç:",
            reply_markup=map_select_keyboard
        )
        db.set_user_state(user_id, "MAP_SELECT")
        return MAP_SELECT
    
    elif target_state == MAP_TYPE:
        selected_map = context.user_data.get('selected_map')
        if selected_map:
            await update.message.reply_text(
                f"<b>{selected_map['name']}</b>\n\n{selected_map['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∫–µ—Ç—ã:",
                reply_markup=map_type_keyboard,
                parse_mode='HTML'
            )
            db.set_user_state(user_id, "MAP_TYPE")
            return MAP_TYPE
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )
    db.set_user_state(user_id, "MENU")
    return MENU

async def handle_non_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not update.message:
        return
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=ReplyKeyboardRemove()
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.effective_user:
        # –û—á–∏—â–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if context.user_data:
            context.user_data['navigation_stack'] = []
            context.user_data['current_state'] = MENU
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        db.set_user_state(update.effective_user.id, "MENU")
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user:
        return MENU
    
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_result = await handle_navigation(update, context, text)
    if navigation_result is not None:
        return navigation_result
    
    if text.startswith("1"):
        save_navigation_state(context, CONSULT, MENU)
        await update.message.reply_text(CONSULT_WELCOME_TEXT, reply_markup=navigation_keyboard)
        db.set_user_state(user_id, "CONSULT")
        return CONSULT
    elif text.startswith("2"):
        save_navigation_state(context, MAP_SELECT, MENU)
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
        await update.message.reply_text(MAP_RULES_TEXT, reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ 15 –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç:",
            reply_markup=map_select_keyboard
        )
        db.set_user_state(user_id, "MAP_SELECT")
        return MAP_SELECT
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MENU

async def consult_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user:
        return MENU
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_result = await handle_navigation(update, context, text)
    if navigation_result is not None:
        return navigation_result
    
    user = update.effective_user
    user_id = user.id
    username = user.username or '-'
    phone = '-'
    question = text
    admin_text = (
        f"üìù <b>–í–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É</b>\n"
        f"ID: <code>{user_id}</code>\n"
        f"–ù–∏–∫: @{username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"\n<b>–í–æ–ø—Ä–æ—Å:</b>\n{question}"
    )
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(chat_id=admin_id, text=admin_text, parse_mode='HTML')
    if not check_user_rate_limit(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - user_last_request.get(user_id, 0))
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
        return MENU
    processing_msg = await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    try:
        answer = ai.get_psychological_consultation(question)
        await update.message.reply_text(answer, reply_markup=main_keyboard)
        db.set_user_state(user_id, "MENU")
    except Exception as e:
        logging.error(f"Error in consult_handler: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
    return MENU

async def map_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user:
        return MAP_SELECT
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_result = await handle_navigation(update, context, text)
    if navigation_result is not None:
        return navigation_result
    
    user_id = update.effective_user.id
    try:
        idx = int(text.split('.')[0].strip()) - 1
        selected_map = PSYCHOLOGICAL_MAPS[idx]
    except Exception:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=map_select_keyboard)
        return MAP_SELECT
    
    context.user_data['selected_map'] = selected_map
    save_navigation_state(context, MAP_TYPE, MAP_SELECT)
    
    await update.message.reply_text(
        f"<b>{selected_map['name']}</b>\n\n{selected_map['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∫–µ—Ç—ã:",
        reply_markup=map_type_keyboard,
        parse_mode='HTML'
    )
    db.set_user_state(user_id, "MAP_TYPE")
    return MAP_TYPE

async def map_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user:
        return MAP_TYPE
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_result = await handle_navigation(update, context, text)
    if navigation_result is not None:
        return navigation_result
    
    if context.user_data is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return MENU
    
    user_id = update.effective_user.id
    selected_map = context.user_data.get('selected_map')
    if not selected_map:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return MENU
    
    if "–ë–∞–∑–æ–≤–∞—è" in text:
        questions = selected_map['basic']
        map_type = "–ë–∞–∑–æ–≤–∞—è"
    elif "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è" in text:
        questions = selected_map['extended']
        map_type = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∫–µ—Ç—ã.", reply_markup=map_type_keyboard)
        return MAP_TYPE
    
    context.user_data['map_questions'] = questions
    context.user_data['map_type'] = map_type
    context.user_data['map_answers'] = []
    context.user_data['current_q'] = 0
    save_navigation_state(context, MAP_QUESTIONS, MAP_TYPE)
    
    await update.message.reply_text(
        f"–í–∞–º –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ.\n\n{questions[0]}",
        reply_markup=navigation_keyboard
    )
    db.set_user_state(user_id, "MAP_QUESTIONS")
    return MAP_QUESTIONS

async def map_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user:
        return MAP_QUESTIONS
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_result = await handle_navigation(update, context, text)
    if navigation_result is not None:
        return navigation_result
    
    if context.user_data is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return MENU
    
    user_id = update.effective_user.id
    answer = text
    answers = context.user_data.get('map_answers', [])
    questions = context.user_data.get('map_questions', [])
    current_q = context.user_data.get('current_q', 0)
    selected_map = context.user_data.get('selected_map')
    map_type = context.user_data.get('map_type')
    
    if not questions or not selected_map or not map_type:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers.append(answer)
    context.user_data['map_answers'] = answers
    
    if current_q + 1 < len(questions):
        context.user_data['current_q'] = current_q + 1
        next_question = questions[current_q + 1]
        await update.message.reply_text(next_question, reply_markup=navigation_keyboard)
        return MAP_QUESTIONS
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞...")
        try:
            map_text = ai.generate_psychological_map(answers, questions, map_type)
            map_id = db.save_psychological_map(user_id, {
                "type": map_type,
                "map_id": selected_map['id'],
                "map_name": selected_map['name'],
                "questions": questions,
                "answers": answers,
                "map_text": map_text
            })
            await update.message.reply_text(
                "–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                reply_markup=main_keyboard
            )
            db.set_user_state(user_id, "MENU")
            user = update.effective_user
            username = user.username or '-'
            phone = '-'
            qa_lines = [f"<b>{i+1}. {q}</b>\n{a}" for i, (q, a) in enumerate(zip(questions, answers))]
            qa_text = '\n\n'.join(qa_lines)
            admin_text = (
                f"üó∫ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã</b>\n"
                f"ID: <code>{user_id}</code>\n"
                f"–ù–∏–∫: @{username}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–ö–∞—Ä—Ç–∞: {selected_map['name']}\n"
                f"–¢–∏–ø –∞–Ω–∫–µ—Ç—ã: {map_type}\n\n"
                f"<b>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:</b>\n{qa_text}"
            )
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(chat_id=admin_id, text=admin_text, parse_mode='HTML')
        except Exception as e:
            logging.error(f"Error in map_questions_handler: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_keyboard
            )
            db.set_user_state(user_id, "MENU")
        return MENU

async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    help_text = """
ü§ñ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É
2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É - –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É

–ù–∞–≤–∏–≥–∞—Ü–∏—è:
üîô –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start
    """
    await update.message.reply_text(help_text)

def main():
    if not TELEGRAM_TOKEN:
        logging.error("BOT_TOKEN environment variable is not set")
        return
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
    non_text_handler = MessageHandler(
        filters.ALL & ~filters.TEXT & ~filters.COMMAND,
        handle_non_text_message
    )
    app.add_handler(non_text_handler)
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            CONSULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, consult_handler)],
            MAP_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, map_select_handler)],
            MAP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, map_type_handler)],
            MAP_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, map_questions_handler)],
        },
        fallbacks=[CommandHandler("help", help_command), MessageHandler(filters.COMMAND, unknown_handler)]
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    app.run_polling()

if __name__ == "__main__":
    main() 
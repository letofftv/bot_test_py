#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç
"""

import random
from typing import List, Dict, Any

class LocalResponseSystem:
    def __init__(self):
        self.consultation_responses = [
            "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω, –∏ –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è –∏ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫ –±–ª–∏–∑–∫–∏–º –ª—é–¥—è–º.",
            
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —ç—Ç–∏–º —Å–æ –º–Ω–æ–π. –í —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å–∏–ª—ã, –∞ –Ω–µ —Å–ª–∞–±–æ—Å—Ç–∏.",
            
            "–í–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
            
            "–Ø —Å–ª—ã—à—É, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–∏–æ–¥. –í —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–ª–µ–∑–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö.",
            
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –í —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤–∞–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–π–º–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å.",
            
            "–í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã. –í —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ–ª–µ–∑–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–±–µ–¥—ã. –ü–æ–º–Ω–∏—Ç–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.",
            
            "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞—Å. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–±—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π - —á–µ—Ä–µ–∑ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.",
            
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –í —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏, –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω—É–∂–Ω–∞.",
            
            "–í–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç—Ä–∏ —Ö–æ—Ä–æ—à–∏–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∑–∞ –¥–µ–Ω—å. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è.",
            
            "–Ø —Å–ª—ã—à—É –≤–∞—à—É –±–æ–ª—å –∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ. –í —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞–∂–Ω–æ –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∫ —Å–µ–±–µ –∏ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã. –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é - —ç—Ç–æ –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
        ]
        
        self.map_templates = {
            "emotional_state": [
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {analysis}",
                "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis}",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω: {analysis}"
            ],
            "personality_traits": [
                "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {analysis}",
                "–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {analysis}",
                "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: {analysis}"
            ],
            "strengths": [
                "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {analysis}",
                "–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: {analysis}",
                "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: {analysis}"
            ],
            "development_areas": [
                "–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è: {analysis}",
                "–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞: {analysis}",
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è: {analysis}"
            ],
            "recommendations": [
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {analysis}",
                "–°–æ–≤–µ—Ç—ã: {analysis}",
                "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {analysis}"
            ]
        }
    
    def get_consultation_response(self, question: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        question_lower = question.lower()
        
        if any(word in question_lower for word in ['—Å—Ç—Ä–µ—Å—Å', '—É—Å—Ç–∞–ª', '—É—Ç–æ–º–ª–µ–Ω', '–Ω–∞–ø—Ä—è–∂–µ–Ω']):
            return "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å—Ç—Ä–µ—Å—Å. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏: –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ. –í–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        
        elif any(word in question_lower for word in ['—Ç—Ä–µ–≤–æ–∂', '–±–µ—Å–ø–æ–∫–æ', '–≤–æ–ª–Ω—É']):
            return "–¢—Ä–µ–≤–æ–≥–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—Ç–µ, —Å–ª—ã—à–∏—Ç–µ, —á—É–≤—Å—Ç–≤—É–µ—Ç–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞."
        
        elif any(word in question_lower for word in ['–æ–¥–∏–Ω–æ–∫', '–Ω–µ–ø–æ–Ω—è—Ç', '–æ—Ç–≤–µ—Ä–≥–Ω—É—Ç']):
            return "–ß—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–º–æ –º–Ω–æ–≥–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏: —Ö–æ–±–±–∏, –≥—Ä—É–ø–ø—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö."
        
        elif any(word in question_lower for word in ['–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω', '—Å–µ—Ä–¥–∏—Ç']):
            return "–ó–ª–æ—Å—Ç—å - —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è. –í–∞–∂–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å –µ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–∏—Å—å–º–æ –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–Ω–∏–º–∞—é—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ù–∞–π–¥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π."
        
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            return random.choice(self.consultation_responses)
    
    def get_psychological_consultation(self, question: str) -> str:
        return self.get_consultation_response(question)
    
    def generate_psychological_map(self, answers: List[str], questions: List[str], map_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
        analysis = self._analyze_answers(answers, questions)
        
        map_text = f"""
ü§ñ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ö–ê–†–¢–ê ({map_type})

üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤:

{analysis}

üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–¥–æ—Å—Ç—å
‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üåü –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω, –∏ –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
        """
        
        return map_text.strip()
    
    def _analyze_answers(self, answers: List[str], questions: List[str]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤"""
        analysis_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        emotional_keywords = ['—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞–¥–æ—Å—Ç–Ω–æ', '—Å–ø–æ–∫–æ–π–Ω–æ', '–≤–æ–ª–Ω—É—é—Å—å', '—É—Å—Ç–∞–ª']
        emotional_count = sum(1 for answer in answers if any(word in answer.lower() for word in emotional_keywords))
        
        if emotional_count > len(answers) / 2:
            analysis_parts.append("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –í —Ü–µ–ª–æ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
        else:
            analysis_parts.append("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏.")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        social_keywords = ['–ª—é–¥–∏', '–¥—Ä—É–∑—å—è', '–æ–±—â–µ–Ω–∏–µ', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ–¥–∏–Ω']
        social_count = sum(1 for answer in answers if any(word in answer.lower() for word in social_keywords))
        
        if social_count > len(answers) / 2:
            analysis_parts.append("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –í—ã —Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏ —Å–≤—è–∑–∏ —Å –ª—é–¥—å–º–∏.")
        else:
            analysis_parts.append("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —É–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞–±–æ—Ç—É.")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active_keywords = ['–¥–≤–∏–∂–µ–Ω–∏–µ', '—Å–ø–æ—Ä—Ç', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—Ä–∞–±–æ—Ç–∞', '–∑–∞–Ω—è—Ç–∏—è']
        active_count = sum(1 for answer in answers if any(word in answer.lower() for word in active_keywords))
        
        if active_count > len(answers) / 2:
            analysis_parts.append("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –í—ã –≤–µ–¥–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.")
        else:
            analysis_parts.append("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω—ã–π, —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –∂–∏–∑–Ω–∏.")
        
        return "\n".join(analysis_parts)
    
    def moderate_content(self, content: str) -> Dict[str, Any]:
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        dangerous_keywords = ['—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏—Ç—å', '—É–º–µ—Ä–µ—Ç—å', '–±–æ–ª—å–Ω–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É —Å–µ–±—è']
        
        is_safe = not any(word in content.lower() for word in dangerous_keywords)
        
        return {
            "is_safe": is_safe,
            "risk_level": "high" if not is_safe else "low",
            "concerns": [] if is_safe else ["–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"],
            "recommendation": "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É" if is_safe else "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å"
        } 
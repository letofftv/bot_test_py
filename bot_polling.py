import logging
import time
from collections import defaultdict
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import TELEGRAM_TOKEN, ADMIN_ID, BASIC_QUESTIONS, EXTENDED_QUESTIONS
from database import Database
from local_responses import LocalResponseSystem

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, CONSULT, MAP_TYPE, MAP_QUESTIONS, WAITING_MODERATION = range(5)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup([
    ["1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"],
    ["2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É"]
], resize_keyboard=True)

map_type_keyboard = ReplyKeyboardMarkup([
    ["–ë–∞–∑–æ–≤–∞—è (4 –≤–æ–ø—Ä–æ—Å–∞)"],
    ["–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (10 –≤–æ–ø—Ä–æ—Å–æ–≤)"]
], resize_keyboard=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = Database()
ai = LocalResponseSystem()

# Rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_request = defaultdict(float)
MIN_REQUEST_INTERVAL = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def check_user_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã"""
    now = time.time()
    last_request = user_last_request.get(user_id, 0)
    
    if now - last_request < MIN_REQUEST_INTERVAL:
        return False
    
    user_last_request[user_id] = now
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if update.message and update.effective_user:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        db.set_user_state(update.effective_user.id, "MENU")
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if not update.message or not update.message.text or not update.effective_user:
        return MENU
    
    text = update.message.text
    user_id = update.effective_user.id
    
    if text.startswith("1"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        db.set_user_state(user_id, "CONSULT")
        return CONSULT
    elif text.startswith("2"):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã:",
            reply_markup=map_type_keyboard
        )
        db.set_user_state(user_id, "MAP_TYPE")
        return MAP_TYPE
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MENU

async def consult_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not update.message or not update.message.text or not update.effective_user:
        return MENU
    
    user = update.effective_user
    user_id = user.id
    username = user.username or '-'
    phone = '-'
    question = update.message.text
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥—É
    admin_text = (
        f"üìù <b>–í–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É</b>\n"
        f"ID: <code>{user_id}</code>\n"
        f"–ù–∏–∫: @{username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"\n<b>–í–æ–ø—Ä–æ—Å:</b>\n{question}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode='HTML')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not check_user_rate_limit(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - user_last_request.get(user_id, 0))
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
        return MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_msg = await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    
    try:
        answer = ai.get_psychological_consultation(question)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(answer, reply_markup=main_keyboard)
        db.set_user_state(user_id, "MENU")
        
    except Exception as e:
        logging.error(f"Error in consult_handler: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
        db.set_user_state(user_id, "MENU")
    
    return MENU

async def map_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã"""
    if not update.message or not update.message.text or not update.effective_user:
        return MAP_TYPE
    
    user_id = update.effective_user.id
    text = update.message.text
    
    if "–ë–∞–∑–æ–≤–∞—è" in text:
        questions = BASIC_QUESTIONS
        map_type = "–ë–∞–∑–æ–≤–∞—è"
    elif "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è" in text:
        questions = EXTENDED_QUESTIONS
        map_type = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã.")
        return MAP_TYPE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if context.user_data is not None:
        context.user_data['map_questions'] = questions
        context.user_data['map_type'] = map_type
        context.user_data['map_answers'] = []
        context.user_data['current_q'] = 0
    
    await update.message.reply_text(
        f"–í–∞–º –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ.\n\n{questions[0]}", 
        reply_markup=ReplyKeyboardRemove()
    )
    db.set_user_state(user_id, "MAP_QUESTIONS")
    return MAP_QUESTIONS

async def map_questions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ä—Ç—ã"""
    if not update.message or not update.message.text or not update.effective_user:
        return MAP_QUESTIONS
    
    user_id = update.effective_user.id
    answer = update.message.text
    
    if context.user_data is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return MENU
    
    answers = context.user_data.get('map_answers', [])
    questions = context.user_data.get('map_questions', [])
    current_q = context.user_data.get('current_q', 0)
    
    answers.append(answer)
    context.user_data['map_answers'] = answers
    
    if current_q + 1 < len(questions):
        context.user_data['current_q'] = current_q + 1
        await update.message.reply_text(questions[current_q + 1])
        return MAP_QUESTIONS
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞...")
        
        try:
            map_text = ai.generate_psychological_map(answers, questions, context.user_data['map_type'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –ë–î –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            map_id = db.save_psychological_map(user_id, {
                "type": context.user_data['map_type'],
                "questions": questions,
                "answers": answers,
                "map_text": map_text
            })
            
            await update.message.reply_text(
                "–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                reply_markup=main_keyboard
            )
            db.set_user_state(user_id, "MENU")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ù–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (ID: {map_id}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}."
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = update.effective_user
            user_id = user.id
            username = user.username or '-'
            phone = '-'
            qa_lines = [f"<b>{i+1}. {q}</b>\n{a}" for i, (q, a) in enumerate(zip(questions, answers))]
            qa_text = '\n\n'.join(qa_lines)
            admin_text = (
                f"üó∫ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã</b>\n"
                f"ID: <code>{user_id}</code>\n"
                f"–ù–∏–∫: @{username}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–¢–∏–ø –∫–∞—Ä—Ç—ã: {context.user_data['map_type']}\n\n"
                f"<b>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:</b>\n{qa_text}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode='HTML')
            
        except Exception as e:
            logging.error(f"Error in map_questions_handler: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_keyboard
            )
            db.set_user_state(user_id, "MENU")
        
        return MENU

async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if update.message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return
    
    help_text = """
ü§ñ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É
2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É - –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start
    """
    await update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logging.error("BOT_TOKEN environment variable is not set")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            CONSULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, consult_handler)],
            MAP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, map_type_handler)],
            MAP_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, map_questions_handler)],
        },
        fallbacks=[MessageHandler(filters.ALL, unknown_handler)],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logging.error(f"Exception while handling an update: {context.error}")
    
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    logging.info("Starting bot with polling...")
    app.run_polling(
        poll_interval=1.0,
        timeout=30,
        bootstrap_retries=5,
        read_timeout=30,
        write_timeout=30,
        drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        allowed_updates=["message", "callback_query"]  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    )

if __name__ == "__main__":
    main() 
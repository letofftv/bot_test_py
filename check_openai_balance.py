#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI API
"""

import requests
import json
from datetime import datetime
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class OpenAIAccountChecker:
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.base_url = "https://api.openai.com/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def check_usage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API"""
        try:
            response = requests.get(
                f"{self.base_url}/usage",
                headers=self.headers
            )
            
            if response.status_code == 200:
                usage_data = response.json()
                return usage_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def check_subscription(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            response = requests.get(
                f"{self.base_url}/dashboard/billing/subscription",
                headers=self.headers
            )
            
            if response.status_code == 200:
                subscription_data = response.json()
                return subscription_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None
    
    def test_api_call(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –≤—ã–∑–æ–≤"""
        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json={
                    "model": "gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": "Hello"}],
                    "max_tokens": 10
                }
            )
            
            if response.status_code == 429:
                error_data = response.json()
                error_message = error_data.get('error', {}).get('message', 'Unknown error')
                error_type = error_data.get('error', {}).get('type', 'unknown')
                
                print(f"‚ö†Ô∏è  Rate limit exceeded!")
                print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}")
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                
                if "insufficient_quota" in error_message.lower():
                    print("üí∏ –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ OpenAI!")
                    print("üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/account/billing –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                
                return False
            elif response.status_code == 200:
                print("‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω")
                return True
            else:
                print(f"‚ùå API –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False
    
    def display_account_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ OpenAI")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not self.api_key:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≤—ã–∑–æ–≤
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–∞...")
        api_success = self.test_api_call()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        print("üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
        subscription = self.check_subscription()
        if subscription:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"   –ü–ª–∞–Ω: {subscription.get('object', 'N/A')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {subscription.get('status', 'N/A')}")
            if 'hard_limit_usd' in subscription:
                print(f"   –õ–∏–º–∏—Ç: ${subscription.get('hard_limit_usd', 'N/A')}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
        usage = self.check_usage()
        if usage:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
            print(json.dumps(usage, indent=2, ensure_ascii=False))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not api_success:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/account/billing")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            print("   - –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç")
        else:
            print("   - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")

def main():
    checker = OpenAIAccountChecker()
    checker.display_account_info()

if __name__ == "__main__":
    main() 